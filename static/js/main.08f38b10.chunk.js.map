{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["fileReader","flights","getReadableHours","o","H","toString","padStart","M","getDateObj","Date","y","m","d","getComparibleDate","handleFileRead","evt","daysOfTheWeek","monthofTheYear","dateRangeStart","dateRangeEnd","bstr","target","result","wb","XLSX","read","type","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","sheets","a","length","startDate","SSF","parse_date_code","endDate","arrivalTime","departureTime","current","ourEnd","pattern","days","substr","split","getTime","getDay","console","log","flight","Al","flNo","trim","getDate","getMonth","getFullYear","Orig","Dest","Own","push","setDate","ws2","json_to_sheet","wb2","book_new","book_append_sheet","writeFile","App","className","id","onChange","e","file","files","FileReader","onload","readAsBinaryString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.08f38b10.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport XLSX from 'xlsx';\n\n\nlet fileReader;\nlet flights = [];\n\nconst handleFileChosen = (file) => {\n\tconsole.log('file chosen', file);\n\n\tfileReader = new FileReader();\n\tfileReader.onload = handleFileRead;\n\tfileReader.readAsBinaryString(file);\n}\n\n\nconst getReadableHours = (o) => {\n\treturn o.H.toString().padStart(2, '0') + ':' + o.M.toString().padStart(2, '0');\n}\n\nconst getReadableDate = (o) => {\n\treturn o.d.toString().padStart(2, '0') + '/' + o.m.toString().padStart(2, '0') + '/' + o.y.toString();\n}\n\nconst getDateObj = (o) => {\n\treturn new Date(o.y, o.m-1, o.d);\n}\n\nconst getComparibleDate = (o) => {\n\treturn o.y.toString() + o.m.toString().padStart(2, '0') + o.d.toString().padStart(2, '0');\n}\n\nconst handleFileRead = (evt) => {\n\n\t// const [flights, setFlights] = useState(0);\n\n\tconst daysOfTheWeek = ['Sunday','Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\tconst monthofTheYear = ['January','February','March','April','May','June','July','August','September','October','November','December']\n\n\tconst dateRangeStart = {\n\t\td: 22,\n\t\tm: 6,\n\t\ty: 2020\n\t};\n\tconst dateRangeEnd = {\n\t\td: 28,\n\t\tm: 6,\n\t\ty: 2020\n\t};\n\n    const bstr = evt.target.result;\n    const wb = XLSX.read(bstr, {type:'binary'}); // cellText:false,cellDates:true,cellNF:true\n    /* Get first worksheet */\n    const wsname = wb.SheetNames[0];\n    const ws = wb.Sheets[wsname];\n    /* Convert array of arrays */\n    // const data = XLSX.utils.sheet_to_csv(ws, {header:1});\n    const data = XLSX.utils.sheet_to_json(ws, {\n\t\t// header: 1, // include header as first row?\n\t\t// raw: false,\n\t\t// dateNF:'yyyymmdd',\n\t\tsheets: ['FlightList']\n\t});\n\t\n    /* Update state */\n\n\t// console.log('Sheet names', wb.SheetNames);\n    // console.log(data);\n\n\t// for each flight info row\n\tfor(var a = 0; a <= data.length; a++){\n\n\t\tif(typeof(data[a]) === 'undefined')\n\t\t{\n\t\t\t// console.log(data[a]);\n\t\t\tcontinue;\n\t\t}\n\n\t\t// check either location is valid\n\t\tif(data[a]['Dest'] === 'MAN' || data[a]['Orig'] === 'MAN'){\n\n\t\t\tlet startDate = XLSX.SSF.parse_date_code(data[a]['Start']);\n\t\t\tlet endDate = XLSX.SSF.parse_date_code(data[a]['End']);\n\t\t\tlet arrivalTime = XLSX.SSF.parse_date_code(data[a]['STA (Loc)']);\n\t\t\tlet departureTime = XLSX.SSF.parse_date_code(data[a]['STD (Loc)']);\n\n\t\t\t// console.log(getComparibleDate(startDate), getComparibleDate(endDate), getReadableHours(arrivalTime), getReadableHours(departureTime));\n\n\t\t\tif(getComparibleDate(startDate) <= getComparibleDate(dateRangeEnd) && getComparibleDate(endDate) >= getComparibleDate(dateRangeStart)){\n\n\t\t\t\t// console.log('Winning', XLSX.SSF.parse_date_code(data[a]['Start']), XLSX.SSF.parse_date_code(data[a]['End']));\n\n\t\t\t\tlet current = getDateObj(dateRangeStart);\n\t\t\t\tlet ourEnd = getDateObj(dateRangeEnd);\n\t\t\t\tlet pattern = data[a]['Pattern'];\n\t\t\t\tpattern = pattern.substr(6,1) + pattern.substr(0,6);\n\t\t\t\t// console.log('pattern', pattern);\n\t\t\t\tlet days = pattern.split('');\n\n\t\t\t\twhile((current.getTime()) <= (ourEnd.getTime()))\n\t\t\t\t{\n\t\t\t\t\t// it's inside our range\n\n\t\t\t\t\t// Loop the flight days to check each as we increment\n\t\t\t\t\t// Check the current date is a M,T,W,T,F,S,S and it's enabled\n\n\t\t\t\t\tif(days[current.getDay()] !== '.'){\n\n\t\t\t\t\t\t// we fly today!\n\t\t\t\t\t\tconsole.log('We fly on ' + daysOfTheWeek[current.getDay()], data[a]);\n\n\t\t\t\t\t\tlet flight = {\n\t\t\t\t\t\t\tAl: data[a]['Al'],\n\t\t\t\t\t\t\tflNo: data[a]['FlNo'].trim(),\n\t\t\t\t\t\t\tDate: daysOfTheWeek[current.getDay()].substr(0,3) + ' ' + current.getDate().toString().padStart(2, '0') + '/' + monthofTheYear[current.getMonth()].substr(0, 3) + '/' + current.getFullYear(),\n\t\t\t\t\t\t\tOrig: data[a]['Orig'],\n\t\t\t\t\t\t\t'STD (Loc)': getReadableHours(departureTime),\n\t\t\t\t\t\t\t'STA (Loc)': getReadableHours(arrivalTime),\n\t\t\t\t\t\t\tDest: data[a]['Dest'],\n\t\t\t\t\t\t\tOwn: data[a]['Own'],\n\t\t\t\t\t\t\t'A/C': data[a]['A/C']\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tflights.push(flight);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrent.setDate(current.getDate() + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// setFlights(flights);\n\t// console.table(flights);\n\n\tif(1){\n\t\n\t\t/* make the worksheet */\n\t\tlet ws2 = XLSX.utils.json_to_sheet(flights);\n\n\t\t/* add to workbook */\n\t\tlet wb2 = XLSX.utils.book_new();\n\t\tXLSX.utils.book_append_sheet(wb2, ws2, \"Flying Lines\");\n\n\t\t/* generate an XLSX file */\n\t\tXLSX.writeFile(wb2, \"flying-lines.xlsx\");\n\t}\n}\n\nfunction App() {\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<input type=\"file\" className=\"file-input\" id=\"schedule-xlsx\" onChange={e => handleFileChosen(e.target.files[0])} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}