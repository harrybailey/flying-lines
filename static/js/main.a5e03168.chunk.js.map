{"version":3,"sources":["components/Form.js","MainContainer.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","handleFileChosen","file","console","log","fileReader","FileReader","onload","handleFileRead","readAsBinaryString","getReadableHours","o","H","toString","padStart","M","getDateObj","Date","y","m","d","getComparibleDate","evt","bstr","target","result","wb","XLSX","read","type","wsname","SheetNames","ws","Sheets","setState","data","utils","sheet_to_json","sheets","handleFormSubmit","daysOfTheWeek","monthofTheYear","dateRangeStart","state","startDate","getDate","getMonth","getFullYear","dateRangeEnd","endDate","flights","a","length","SSF","parse_date_code","arrivalTime","departureTime","startDateTime","endDateTime","current","ourEnd","pattern","days","substr","split","getTime","setDate","getDay","flight","Al","FlNo","trim","Orig","Dest","Own","push","ws2","json_to_sheet","wb2","book_new","book_append_sheet","writeFile","className","selected","this","dateFormat","onChange","date","id","e","files","onClick","React","Component","MainContainer","class","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a5e03168.chunk.js","sourcesContent":["import React from 'react'\nimport XLSX from 'xlsx';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nclass Form extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: null,\n            flights: [],\n            startDate: new Date(), //setStartDate] = useState(new Date());\n            endDate: new Date(), //const [endDate, setEndDate] = useState(new Date());\n        }\n    }\n\n    handleFileChosen = (file) => {\n        console.log('file chosen', file);\n\n        let fileReader = new FileReader();\n        fileReader.onload = this.handleFileRead;\n        fileReader.readAsBinaryString(file);\n    }\n\n\n    getReadableHours = (o) => {\n        return o.H.toString().padStart(2, '0') + ':' + o.M.toString().padStart(2, '0');\n    }\n\n    getDateObj = (o) => {\n        return new Date(o.y, o.m-1, o.d);\n    }\n\n    getComparibleDate = (o) => {\n        return o.y.toString() + o.m.toString().padStart(2, '0') + o.d.toString().padStart(2, '0');\n    }\n\n    handleFileRead = (evt) => {\n\n       const bstr = evt.target.result;\n        const wb = XLSX.read(bstr, {type:'binary'}); // cellText:false,cellDates:true,cellNF:true\n        /* Get first worksheet */\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n        // const data = XLSX.utils.sheet_to_csv(ws, {header:1});\n        this.setState({data: XLSX.utils.sheet_to_json(ws, {\n            // header: 1, // include header as first row?\n            // raw: false,\n            // dateNF:'yyyymmdd',\n            sheets: ['FlightList']\n        })});\n\n    }\n\n\n    handleFormSubmit = (evt) => {\n\n        // const [flights, setFlights] = useState(0);\n\n        const daysOfTheWeek = ['Sunday','Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const monthofTheYear = ['January','February','March','April','May','June','July','August','September','October','November','December']\n\n        const dateRangeStart = {\n            d: this.state.startDate.getDate(),\n            m: this.state.startDate.getMonth()+1,\n            y: this.state.startDate.getFullYear()\n        };\n\n        const dateRangeEnd = {\n            d: this.state.endDate.getDate(),\n            m: this.state.endDate.getMonth()+1,\n            y: this.state.endDate.getFullYear()\n        };\n\n \n\n    console.log(dateRangeStart, dateRangeEnd);\n\n        \n        /* Update state */\n\n        // console.log('Sheet names', wb.SheetNames);\n        // console.log(data);\n\n        this.setState({flights:[]});\n        let flights = [];\n\n        // for each flight info row\n        for(var a = 0; a <= this.state.data.length; a++){\n\n            if(typeof(this.state.data[a]) === 'undefined')\n            {\n                // console.log(data[a]);\n                continue;\n            }\n\n            // check either location is valid\n            if(this.state.data[a]['Dest'] === 'MAN' || this.state.data[a]['Orig'] === 'MAN'){\n\n                let startDate = XLSX.SSF.parse_date_code(this.state.data[a]['Start']);\n                let endDate = XLSX.SSF.parse_date_code(this.state.data[a]['End']);\n                let arrivalTime = XLSX.SSF.parse_date_code(this.state.data[a]['STA (Loc)']);\n                let departureTime = XLSX.SSF.parse_date_code(this.state.data[a]['STD (Loc)']);\n\n                // console.log(getComparibleDate(startDate), getComparibleDate(endDate), getReadableHours(arrivalTime), getReadableHours(departureTime));\n\n                if(this.getComparibleDate(startDate) <= this.getComparibleDate(dateRangeEnd) && this.getComparibleDate(endDate) >= this.getComparibleDate(dateRangeStart)){\n\n                    // console.log('Winning', XLSX.SSF.parse_date_code(this.state.data[a]['Start']), XLSX.SSF.parse_date_code(this.state.data[a]['End']));\n\n                    let startDateTime = this.getDateObj(startDate);\n                    let endDateTime = this.getDateObj(endDate);\n                    let current = this.getDateObj(dateRangeStart);\n                    let ourEnd = this.getDateObj(dateRangeEnd);\n                    let pattern = this.state.data[a]['Pattern'];\n                    pattern = pattern.substr(6,1) + pattern.substr(0,6);\n                    // console.log('pattern', pattern);\n                    let days = pattern.split('');\n\n                    while((current.getTime()) <= (ourEnd.getTime()))\n                    {\n                        // it's inside our range\n                        if(startDateTime.getTime() > current.getTime() || endDateTime.getTime() < current.getTime())\n                        {\n                            console.log('Skipping as starts in future or ends in past');\n                            current.setDate(current.getDate() + 1);\n                            continue;\n                        }\n\n                        // Loop the flight days to check each as we increment\n                        // Check the current date is a M,T,W,T,F,S,S and it's enabled\n\n                        if(days[current.getDay()] !== '.'){\n\n                            // we fly today!\n                            console.log('We fly on ' + daysOfTheWeek[current.getDay()], this.state.data[a]);\n\n                            let flight = {\n                                Al: this.state.data[a]['Al'],\n                                FlNo: this.state.data[a]['FlNo'].trim(),\n                                Date: daysOfTheWeek[current.getDay()].substr(0,3) + ' ' + current.getDate().toString().padStart(2, '0') + '/' + monthofTheYear[current.getMonth()].substr(0, 3) + '/' + current.getFullYear(),\n                                Orig: this.state.data[a]['Orig'],\n                                'STD (Loc)': this.getReadableHours(departureTime),\n                                'STA (Loc)': this.getReadableHours(arrivalTime),\n                                Dest: this.state.data[a]['Dest'],\n                                Own: this.state.data[a]['Own'],\n                                'A/C': this.state.data[a]['A/C']\n                            };\n\n                            flights.push(flight);\n\n                        }\n\n                        current.setDate(current.getDate() + 1);\n                    }\n                }\n            }\n        }\n\n        // setFlights(flights);\n        // console.table(flights);\n        this.setState({flights:flights});\n\n        if(1){\n        \n            /* make the worksheet */\n            let ws2 = XLSX.utils.json_to_sheet(flights);\n\n            /* add to workbook */\n            let wb2 = XLSX.utils.book_new();\n            XLSX.utils.book_append_sheet(wb2, ws2, \"Flying Lines\");\n\n            /* generate an XLSX file */\n            XLSX.writeFile(wb2, \"flying-lines.xlsx\");\n        }\n    }\n\n\n    render() {\n\n        return (\n            <div>\n                <div>Range Start: <DatePicker className=\"date-picker\" selected={this.state.startDate} dateFormat=\"dd/MM/yyyy\" onChange={date => this.setState({startDate:date})} /></div>\n                <div>Range End: <DatePicker className=\"date-picker\" selected={this.state.endDate} dateFormat=\"dd/MM/yyyy\" onChange={date => this.setState({endDate:date})} /></div>\n                <div><input type=\"file\" className=\"file-input\" id=\"schedule-xlsx\" onChange={e => this.handleFileChosen(e.target.files[0])} /></div>\n                <div><button className=\"generate-button\" onClick={e => this.handleFormSubmit(e) }>Generate</button></div>\n            </div>\n        )\n    }\n}\n\nexport default Form;","import React from 'react';\nimport Form from './components/Form'\nimport './App.css';\n\nfunction MainContainer()\n{\n    return (\n        <div className=\"main-container\">\n            <h1 class=\"heading\">Flying Lines</h1>\n           <Form />\n           <div class=\"guidance\">\n            <h2>Guidance</h2>\n            <ol>\n                <li>Select a start and end date for flying lines.</li>\n                <li>Browse and select your schedule .xlsx file</li>\n                <li>Click to generate a flying lines file for download</li>\n            </ol>\n            <p>File upload must contain the sheet 'FlightList' and the columns 'Al', 'FlNo', 'Dest', 'Orig', 'Start', 'End', 'STA (Loc)', 'STD (Loc)', 'Own', 'A/C' and 'Pattern'.</p>\n            <p>Generated file will named 'flying-lines.xlsx' and contain a single 'Flying Lines' sheet with columns 'Al', 'FlNo', 'Date', 'Orig', 'STD (Loc)', 'STA (Loc)', 'Dest', 'Own', 'A/C'</p>\n           </div>\n        </div>\n    );\n}\n\nexport default MainContainer;","import React from 'react';\nimport './App.css';\nimport MainContainer from './MainContainer'\n\nfunction App() {\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<MainContainer />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}